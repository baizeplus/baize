package {{.Table.ModuleName}}DaoImpl

import (
    "{{.Table.PackageName}}{{.Table.ModuleName}}Models"
    "database/sql"
    "fmt"
    "context"
    "errors"
	"github.com/baizeplus/sqly"
)

// ==========================================================================
// date：{{.GenerateTime.Format "2006-01-02 15:04:05" }}
// author：{{.Table.FunctionAuthor}}
// version: v1.0
// ==========================================================================


type {{.Table.StructName}}Dao struct {
	{{.Table.BusinessName}}Sql string
}

func New{{.Table.StructName}}Dao()*{{.Table.StructName}}Dao {
	return &{{.Table.StructName}}Dao{
		{{.Table.BusinessName}}Sql: `select {{range $index, $column := .Columns}}{{if ne $index 0}},{{end}}{{$column.ColumnName}} {{end}} from {{.Table.TableName }}`,
	}
}

func ({{.Table.BusinessName}}Dao *{{.Table.StructName}}Dao) Select{{.Table.StructName}}ById(ctx context.Context, db sqly.SqlyContext, {{.IdField}} {{.IdType}}  )({{.Table.BusinessName}} *{{.Table.ModuleName}}Models.{{.Table.StructName}}Vo) {
	{{.Table.BusinessName}} = new({{.Table.ModuleName}}Models.{{.Table.StructName}}Vo)
	whereSql := ` where {{.IdColumnName}} = ?`
	err := db.GetContext(ctx,{{.Table.BusinessName}} ,{{.Table.BusinessName}}Dao.{{.Table.BusinessName}}Sql+whereSql,{{.IdField}})
	if err != nil && !errors.Is(err, sql.ErrNoRows) {
		panic(err)
	}
	return {{.Table.BusinessName}}
}


func ({{.Table.BusinessName}}Dao *{{.Table.StructName}}Dao)  Select{{.Table.StructName}}ListAndTotal(ctx context.Context, db sqly.SqlyContext, {{.Table.BusinessName}} *{{.Table.ModuleName}}Models.{{.Table.StructName}}DQL) (list []*{{.Table.ModuleName}}Models.{{.Table.StructName}}Vo, total int64) {
	whereSql := ``
	{{range $index, $column := .Columns}}{{if eq $column.IsList "1"}}
	if {{$.Table.BusinessName}}.{{$column.GoField}} != {{if(or (eq $column.GoType "int64") (eq $column.GoType "float64"))}}0{{else if eq $column.GoType "Time"}}nil{{else}}""{{end}}{
		whereSql =" AND {{$column.ColumnName}} {{if eq $column.QueryType "EQ"}}={{else if eq $column.QueryType "NE"}}!={{else if eq $column.QueryType "GT"}}>{{else if eq $column.QueryType "GTE"}}>={{else if eq $column.QueryType "LT"}}<{{else if eq $column.QueryType "LTE"}}<={{else}}like{{end}} {{if ne $column.QueryType "LIKE"}}:{{$column.ColumnName}} {{else}}concat('%', :{{$column.ColumnName}}, '%') {{end}}"
	}
	{{end}}{{end}}
	if whereSql != "" {
		whereSql = " where " + whereSql[4:]
	}

	err := db.NamedSelectPageContext(ctx, &list, &total, {{.Table.BusinessName}}Dao.{{.Table.BusinessName}}Sql+whereSql, {{.Table.BusinessName}})
	if err != nil {
		panic(err)
	}
	return
}


func ({{.Table.BusinessName}}Dao *{{.Table.StructName}}Dao)  Select{{.Table.StructName}}List(ctx context.Context, db sqly.SqlyContext, {{.Table.BusinessName}} *{{.Table.ModuleName}}Models.{{.Table.StructName}}DQL) (list []*{{.Table.ModuleName}}Models.{{.Table.StructName}}Vo) {
	whereSql := ``

{{range $index, $column := .Columns -}}{{if eq $column.IsQuery "1"}}
	if {{$.Table.BusinessName}}.{{$column.GoField}} != {{if(or (eq $column.GoType "int64") (eq $column.GoType "float64"))}}0{{else if eq $column.GoType "Time"}}nil{{else}}""{{end}}{
		whereSql =" AND {{$column.ColumnName}} {{if eq $column.QueryType "EQ"}}={{else if eq $column.QueryType "NE"}}!={{else if eq $column.QueryType "GT"}}>{{else if eq $column.QueryType "GTE"}}>={{else if eq $column.QueryType "LT"}}<{{else if eq $column.QueryType "LTE"}}<={{else}}like{{end}} {{if ne $column.QueryType "LIKE"}}:{{$column.ColumnName}} {{else}}concat('%', :{{$column.ColumnName}}, '%') {{end}}"
	}
{{end}}{{- end}}

if whereSql != "" {
		whereSql = " where " + whereSql[4:]
	}
	list = make([]*{{.Table.ModuleName}}Models.{{.Table.StructName}}Vo, 0)
	err := db.NamedSelectContext(ctx, &list, {{.Table.BusinessName}}Dao.{{.Table.BusinessName}}Sql+whereSql, {{.Table.BusinessName}})
	if err != nil {
		panic(err)
	}
	return
}

func  ({{.Table.BusinessName}}Dao *{{.Table.StructName}}Dao)  Insert{{.Table.StructName}}(ctx context.Context, db sqly.SqlyContext, {{.Table.BusinessName}} *{{.Table.ModuleName}}Models.{{.Table.StructName}}Vo) {
	insertSQL := `insert into {{.Table.TableName }}({{range $index, $column := .Columns}}{{if ne $index 0}},{{end}}{{$column.ColumnName}} {{end}} %s)
	values({{range $index, $column := .Columns}}{{if ne $index 0}},{{end}}:{{$column.ColumnName}} {{end}} %s)`
	key := ""
	value := ""

	insertStr := fmt.Sprintf(insertSQL, key, value)
	_, err := db.NamedExecContext(ctx, insertStr, {{.Table.BusinessName}})
	if err != nil {
		panic(err)
	}
	return
}

func  ({{.Table.BusinessName}}Dao *{{.Table.StructName}}Dao) Update{{.Table.StructName}}(ctx context.Context, db sqly.SqlyContext, {{.Table.BusinessName}} *{{.Table.ModuleName}}Models.{{.Table.StructName}}Vo)  {
	updateSQL := `update {{.Table.TableName }} set  update_time = :update_time , update_by = :update_by `

{{range $index, $column := .Columns -}}{{if eq $column.IsEdit "1"}}
	if {{$.Table.BusinessName}}.{{$column.GoField}} != {{if(or (eq $column.GoType "int64") (eq $column.GoType "float64"))}}0{{else if eq $column.GoType "Time"}}nil{{else}}""{{end}}{
		updateSQL += ", {{$column.ColumnName}} = :{{$column.ColumnName}}"
	}
{{end}}{{end}}

	updateSQL += " where {{.IdColumnName}} = :{{.IdColumnName}}"
	_, err := db.NamedExecContext(ctx, updateSQL, {{.Table.BusinessName}})
	if err != nil {
		panic(err)
	}
	return
}

func  ({{.Table.BusinessName}}Dao *{{.Table.StructName}}Dao)  Delete{{.Table.StructName}}ByIds(ctx context.Context, db sqly.SqlyContext, {{.IdField}}s []{{.IdType}} ) {
	query, i, err := sqly.In("delete from {{.Table.TableName }} where {{.IdColumnName}} in(?)", {{.IdField}}s)
	if err != nil {
		panic(err)
	}
	_, err = db.ExecContext(ctx, query, i...)
	if err != nil {
		panic(err)
	}
	return
}