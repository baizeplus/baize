package {{.table.ModuleName}}DaoImpl

import (
    "{{.table.PackageName}}{{.table.ModuleName}}Models"
    "database/sql"
    "fmt"
    "github.com/jmoiron/sqlx"
)

// ==========================================================================
// date：{{.table.GenerateTime.Format "2006-01-02 15:04:05" }}
// author：{{.table.FunctionAuthor}}
// version: v1.0
// ==========================================================================


type {{.table.StructName}}Dao struct {
	{{.table.BusinessName}}Sql string
}

func New{{.table.StructName}}Dao()*{{.table.StructName}}Dao {
	return &{{.table.StructName}}Dao{
		{{.table.BusinessName}}Sql: `select {{range $index, $column := .table.Columns}}{{if ne $index 0}},{{end}}{{$column.ColumnName}} {{end}} from {{.table.TableName }}`,
	}
}



func ({{.table.BusinessName}}Dao *{{.table.StructName}}Dao) Select{{.table.StructName}}ById(ctx context.Context, db sqly.SqlyContext, id {{range $index, $column := .table.Columns}}{{if eq $column.IsPk "1"}}{{$column.HtmlField}} {{$column.GoType}}{{end}}{{end}}) ({{.table.BusinessName}} *{{.table.ModuleName}}Models.{{.table.StructName}}Vo) {
	{{.table.BusinessName}} = new({{.table.ModuleName}}Models.{{.table.StructName}}Vo)
	whereSql := ` where d.dept_id = ?`
	err := db.GetContext(ctx,{{.table.BusinessName}} ,{{.table.BusinessName}}Dao.{{.table.BusinessName}}Sql+whereSql,id)
	if err != nil && !errors.Is(sql.ErrNoRows, err) {
		panic(err)
	}
	return {{.table.BusinessName}}
}