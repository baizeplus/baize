package {{.Table.ModuleName}}ServiceImpl

import (
    "{{.Table.PackageName}}{{.Table.ModuleName}}Dao"
    "{{.Table.PackageName}}{{.Table.ModuleName}}Dao/{{.Table.ModuleName}}DaoImpl"
    "{{.Table.PackageName}}{{.Table.ModuleName}}Models"
    "baize/app/utils/excel"
    "baize/app/utils/snowflake"
    "github.com/baizeplus/sqly"
    "github.com/gin-gonic/gin"
)

type {{.Table.StructName}}Service struct {
    data    *sqly.DB
    {{.Table.BusinessName}}Dao {{.Table.ModuleName}}Dao.I{{.Table.StructName}}Dao
}

func New{{.Table.StructName}}Service(data *sqly.DB, {{.Table.BusinessName}}Dao *{{.Table.ModuleName}}Impl.{{.Table.StructName}}Dao) *PostService {
    return &PostService{
    data:    data,
    {{.Table.BusinessName}}Dao: {{.Table.BusinessName}}Dao,
    }
}


func ({{.Table.BusinessName}}Service *{{.Table.StructName}}Service)Select{{.Table.StructName}}ById(c *gin.Context, {{.IdField}} {{.IdType}}  )({{.Table.BusinessName}} *{{.Table.ModuleName}}Models.{{.Table.StructName}}Vo) {
    return {{.Table.BusinessName}}Service.{{.Table.BusinessName}}Dao.Select{{.Table.StructName}}ById(c,{{.Table.BusinessName}}Service.data,{{.IdField}})
}

func ({{.Table.BusinessName}}Service *{{.Table.StructName}}Service)Select{{.Table.StructName}}ListAndTotal(c *gin.Context, {{.Table.BusinessName}} *{{.Table.ModuleName}}Models.{{.Table.StructName}}DQL) (list []*{{.Table.ModuleName}}Models.{{.Table.StructName}}Vo, total *int64) {
    return {{.Table.BusinessName}}Service.{{.Table.BusinessName}}Dao.Select{{.Table.StructName}}ListAndTotal(c,{{.Table.BusinessName}}Service.data,{{.IdField}})
}

func ({{.Table.BusinessName}}Service *{{.Table.StructName}}Service)Export{{.Table.StructName}}Excel(c *gin.Context, {{.Table.BusinessName}} *{{.Table.ModuleName}}Models.{{.Table.StructName}}DQL) (data []byte) {
    list := {{.Table.BusinessName}}Service.{{.Table.BusinessName}}Dao.Select{{.Table.StructName}}List(c,{{.Table.BusinessName}}Service.data,{{.IdField}})
    toExcel, err := excel.SliceToExcel(list)
    if err != nil {
        panic(err)
    }
    buffer, err := toExcel.WriteToBuffer()
    if err != nil {
        panic(err)
    }
    return buffer.Bytes()
}

func ({{.Table.BusinessName}}Service *{{.Table.StructName}}Service)Insert{{.Table.StructName}}(c *gin.Context, {{.Table.BusinessName}} *{{.Table.ModuleName}}Models.{{.Table.StructName}}Vo){
    {{.Table.BusinessName}}.IdField = snowflake.GenID()
    {{.Table.BusinessName}}Service.{{.Table.BusinessName}}Dao.Insert{{.Table.StructName}}(c, {{.Table.BusinessName}}Service.data, {{.Table.BusinessName}})
}

func ({{.Table.BusinessName}}Service *{{.Table.StructName}}Service)Update{{.Table.StructName}}(c *gin.Context, db sqly.SqlyContext, {{.Table.BusinessName}} *{{.Table.ModuleName}}Models.{{.Table.StructName}}Vo) {
    {{.Table.BusinessName}}Service.{{.Table.BusinessName}}Dao.Update{{.Table.StructName}}(c, {{.Table.BusinessName}}Service.data, {{.Table.BusinessName}})
}

func ({{.Table.BusinessName}}Service *{{.Table.StructName}}Service)Delete{{.Table.StructName}}ByIds(c *gin.Context,{{.IdField}}s []{{.IdType}} ) {
    {{.Table.BusinessName}}Service.{{.Table.BusinessName}}Dao.Delete{{.Table.StructName}}(c, {{.Table.BusinessName}}Service.data, {{.IdField}}s)
}
