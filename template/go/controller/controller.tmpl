package {{.Table.ModuleName}}Controller

import (
    "{{.Table.PackageName}}{{.Table.ModuleName}}Server"
    "{{.Table.PackageName}}{{.Table.ModuleName}}Server/{{.Table.ModuleName}}ServerImpl"
    "{{.Table.PackageName}}{{.Table.ModuleName}}Models"
    "baize/app/utils/baizeContext"
    "github.com/gin-gonic/gin"
)

type {{.Table.StructName}} struct {
    {{.Table.BusinessName}}Server {{.Table.ModuleName}}Server.I{{.Table.StructName}}Server
}

func New{{.Table.StructName}}(ps *{{.Table.ModuleName}}ServerImpl.I{{.Table.StructName}}Server) *{{.Table.StructName}} {
return &{{.Table.StructName}}{ {{.Table.BusinessName}}Server:{{.Table.BusinessName}}Server }
}

// {{.Table.StructName}}List 查询{{.Table.FunctionName}}列表查询
// @Summary 查询{{.Table.FunctionName}}列表查询
// @Description 查询{{.Table.FunctionName}}列表查询
// @Tags {{.Table.FunctionName}}相关
// @Param  object query {{.Table.ModuleName}}Models.{{.Table.StructName}}DQL true "查询信息"
// @Security BearerAuth
// @Produce application/json
// @Success 200 {object}  response.ResponseData{data=response.ListData{Rows=[]{{.Table.ModuleName}}Models.{{.Table.StructName}}Vo}}  "成功"
// @Router /{{.Table.ModuleName}}/{{.Table.BusinessName}}/list  [get]
func ({{.Table.BusinessName}} *{{.Table.StructName}}) {{.Table.StructName}}List(c *gin.Context) {
    dql := new({{.Table.ModuleName}}Models.{{.Table.StructName}}DQL )
    _ = c.ShouldBind(dql)
    list, count := {{.Table.BusinessName}}.{{.Table.BusinessName}}Server.Select{{.Table.StructName}}List(c, dql)
    baizeContext.SuccessListData(c, list, count)
}

// PostExport 导出{{.Table.FunctionName}}
// @Summary 导出{{.Table.FunctionName}}
// @Description 导出{{.Table.FunctionName}}
// @Tags {{.Table.FunctionName}}相关
// @Param  object query {{.Table.ModuleName}}Models.{{.Table.StructName}}DQL true "查询信息"
// @Security BearerAuth
// @Produce application/octet-stream
// @Success 200 {object} []byte
// @Router /{{.Table.ModuleName}}/{{.Table.BusinessName}}/export [post]
func (pc *Post) {{.Table.StructName}}Export(c *gin.Context) {
    dql := new({{.Table.ModuleName}}Models.{{.Table.StructName}}DQL )
    _ = c.ShouldBind(dql)
    data := {{.Table.BusinessName}}.{{.Table.BusinessName}}Server.{{.Table.StructName}}Export(c, dql)
    baizeContext.DataPackageExcel(c, data)
}

// PostGetInfo 根据ID获取{{.Table.FunctionName}}信息
// @Summary 根据ID获取{{.Table.FunctionName}}信息
// @Description 根据ID获取{{.Table.FunctionName}}信息
// @Tags {{.Table.FunctionName}}相关
// @Param {{.IdField}} path string true "{{.IdField}}"
// @Security BearerAuth
// @Produce application/json
// @Success 200 {object}  response.ResponseData{data=systemModels.SysPostVo}  "成功"
// @Router /system/post/{postId}  [get]
func (pc *Post) PostGetInfo(c *gin.Context) {
postId := baizeContext.ParamInt64(c, "postId")
if postId == 0 {
baizeContext.ParameterError(c)
return
}
baizeContext.SuccessData(c, pc.ps.SelectPostById(c, postId))
}

// PostAdd 添加岗位
// @Summary 添加岗位
// @Description 添加岗位
// @Tags 岗位相关
// @Param  object body systemModels.SysPostVo true "公司信息"
// @Security BearerAuth
// @Produce application/json
// @Success 200 {object}  response.ResponseData "成功"
// @Router /system/post  [post]
func (pc *Post) PostAdd(c *gin.Context) {
sysPost := new(systemModels.SysPostVo)
if err := c.ShouldBindJSON(sysPost); err != nil {
baizeContext.ParameterError(c)
return
}
sysPost.SetCreateBy(baizeContext.GetUserId(c))
pc.ps.InsertPost(c, sysPost)
baizeContext.Success(c)
}

// PostEdit 修改岗位
// @Summary 修改岗位
// @Description 修改岗位
// @Tags 岗位相关
// @Param  object body systemModels.SysPostVo true "公司信息"
// @Security BearerAuth
// @Produce application/json
// @Success 200 {object}  response.ResponseData "成功"
// @Router /system/post  [put]
func (pc *Post) PostEdit(c *gin.Context) {
post := new(systemModels.SysPostVo)
if err := c.ShouldBindJSON(post); err != nil {
baizeContext.ParameterError(c)
return
}
post.SetUpdateBy(baizeContext.GetUserId(c))
pc.ps.UpdatePost(c, post)
baizeContext.Success(c)
}

// PostRemove 删除岗位
// @Summary 删除岗位
// @Description 删除岗位
// @Tags 岗位相关
// @Param ids path []string true "postId"
// @Security BearerAuth
// @Produce application/json
// @Success 200 {object}  response.ResponseData "成功"
// @Router /system/post/{postIds}  [delete]
func (pc *Post) PostRemove(c *gin.Context) {
pc.ps.DeletePostByIds(c, baizeContext.ParamInt64Array(c, "postIds"))
baizeContext.Success(c)
}
