package {{.Table.ModuleName}}Controller

import (
    "{{.Table.PackageName}}{{.Table.ModuleName}}Service"
    "{{.Table.PackageName}}{{.Table.ModuleName}}Service/{{.Table.ModuleName}}ServiceImpl"
    "{{.Table.PackageName}}{{.Table.ModuleName}}Models"
    "baize/app/utils/baizeContext"
    "github.com/gin-gonic/gin"
)

// ==========================================================================
// date：{{.GenerateTime.Format "2006-01-02 15:04:05" }}
// author：{{.Table.FunctionAuthor}}
// version: v1.0
// ==========================================================================


type {{.Table.StructName}} struct {
    {{.Table.BusinessName}}Service {{.Table.ModuleName}}Service.I{{.Table.StructName}}Service
}

func New{{.Table.StructName}}({{.Table.BusinessName}}Service *{{.Table.ModuleName}}ServiceImpl.{{.Table.StructName}}Service) *{{.Table.StructName}} {
return &{{.Table.StructName}}{ {{.Table.BusinessName}}Service:{{.Table.BusinessName}}Service }
}

// {{.Table.StructName}}List 查询{{.Table.FunctionName}}列表查询
// @Summary 查询{{.Table.FunctionName}}列表查询
// @Description 查询{{.Table.FunctionName}}列表查询
// @Tags {{.Table.FunctionName}}相关
// @Param  object query {{.Table.ModuleName}}Models.{{.Table.StructName}}DQL true "查询信息"
// @Security BearerAuth
// @Produce application/json
// @Success 200 {object}  response.ResponseData{data=response.ListData{Rows=[]{{.Table.ModuleName}}Models.{{.Table.StructName}}Vo}}  "成功"
// @Router /{{.Table.ModuleName}}/{{.Table.BusinessName}}/list  [get]
func ({{.Table.BusinessName}} *{{.Table.StructName}}) {{.Table.StructName}}List(c *gin.Context) {
    dql := new({{.Table.ModuleName}}Models.{{.Table.StructName}}DQL )
    _ = c.ShouldBind(dql)
    list, count := {{.Table.BusinessName}}.{{.Table.BusinessName}}Service.Select{{.Table.StructName}}ListAndTotal(c, dql)
    baizeContext.SuccessListData(c, list, count)
}

// {{.Table.StructName}}Export 导出{{.Table.FunctionName}}
// @Summary 导出{{.Table.FunctionName}}
// @Description 导出{{.Table.FunctionName}}
// @Tags {{.Table.FunctionName}}相关
// @Param  object query {{.Table.ModuleName}}Models.{{.Table.StructName}}DQL true "查询信息"
// @Security BearerAuth
// @Produce application/octet-stream
// @Success 200 {object} []byte
// @Router /{{.Table.ModuleName}}/{{.Table.BusinessName}}/export [post]
func ({{.Table.BusinessName}} *{{.Table.StructName}}) {{.Table.StructName}}Export(c *gin.Context) {
    dql := new({{.Table.ModuleName}}Models.{{.Table.StructName}}DQL )
    _ = c.ShouldBind(dql)
    data := {{.Table.BusinessName}}.{{.Table.BusinessName}}Service.Export{{.Table.StructName}}Excel(c, dql)
    baizeContext.DataPackageExcel(c, data)
}

// {{.Table.StructName}}GetInfo 根据ID获取{{.Table.FunctionName}}信息
// @Summary 根据ID获取{{.Table.FunctionName}}信息
// @Description 根据ID获取{{.Table.FunctionName}}信息
// @Tags {{.Table.FunctionName}}相关
// @Param {{.IdField}} path string true "{{.IdField}}"
// @Security BearerAuth
// @Produce application/json

// @Success 200 {object}  response.ResponseData{data={{.Table.ModuleName}}Models.{{.Table.StructName}}Vo}}  "成功"
// @Router /{{.Table.ModuleName}}/{{.Table.BusinessName}}/{{ "{" }}{{.IdField}}}  [get]
func ({{.Table.BusinessName}} *{{.Table.StructName}}) {{.Table.StructName}}GetInfo(c *gin.Context) {
    {{.IdField}} := baizeContext.ParamInt64(c, "{{.IdField}}")
    if {{.IdField}} == 0 {
        baizeContext.ParameterError(c)
        return
    }
    baizeContext.SuccessData(c, {{.Table.BusinessName}}.{{.Table.BusinessName}}Service.Select{{.Table.StructName}}ById(c, {{.IdField}}))
}

// {{.Table.StructName}}Add 添加{{.Table.FunctionName}}
// @Summary 添加{{.Table.FunctionName}}
// @Description 添加{{.Table.FunctionName}}
// @Tags {{.Table.FunctionName}}相关
// @Param  object body {{.Table.ModuleName}}Models.{{.Table.StructName}}Vo true "{{.Table.FunctionName}}信息"
// @Security BearerAuth
// @Produce application/json
// @Success 200 {object}  response.ResponseData "成功"
// @Router /{{.Table.ModuleName}}/{{.Table.BusinessName}}  [post]
func ({{.Table.BusinessName}} *{{.Table.StructName}}) {{.Table.StructName}}Add(c *gin.Context) {
    vo := new({{.Table.ModuleName}}Models.{{.Table.StructName}}Vo)
    if err := c.ShouldBindJSON(vo); err != nil {
        baizeContext.ParameterError(c)
        return
    }
    vo.SetCreateBy(baizeContext.GetUserId(c))
    {{.Table.BusinessName}}.{{.Table.BusinessName}}Service.Insert{{.Table.StructName}}(c, vo)
    baizeContext.Success(c)
}

// {{.Table.StructName}}Edit 修改{{.Table.FunctionName}}
// @Summary 修改{{.Table.FunctionName}}
// @Description 修改{{.Table.FunctionName}}
// @Tags {{.Table.FunctionName}}相关
// @Param  object body {{.Table.ModuleName}}Models.{{.Table.StructName}}Vo true "{{.Table.FunctionName}}信息"
// @Security BearerAuth
// @Produce application/json
// @Success 200 {object}  response.ResponseData "成功"
// @Router /{{.Table.ModuleName}}/{{.Table.BusinessName}}  [put]
func ({{.Table.BusinessName}} *{{.Table.StructName}}) {{.Table.StructName}}Edit(c *gin.Context) {
    vo := new({{.Table.ModuleName}}Models.{{.Table.StructName}}Vo)
    if err := c.ShouldBindJSON(vo); err != nil {
        baizeContext.ParameterError(c)
    return
    }
    vo.SetUpdateBy(baizeContext.GetUserId(c))
    {{.Table.BusinessName}}.{{.Table.BusinessName}}Service.Update{{.Table.StructName}}(c, vo)
    baizeContext.Success(c)
}

// {{.Table.StructName}}Remove 删除{{.Table.FunctionName}}
// @Summary 删除{{.Table.FunctionName}}
// @Description 删除{{.Table.FunctionName}}
// @Tags {{.Table.FunctionName}}相关
// @Param {{.IdField}} path []string true "{{.IdField}}s"
// @Security BearerAuth
// @Produce application/json
// @Success 200 {object}  response.ResponseData "成功"
// @Router /{{.Table.ModuleName}}/{{.Table.BusinessName}}/{{ "{" }}{{.IdField}}s}  [delete]
func ({{.Table.BusinessName}} *{{.Table.StructName}}) {{.Table.StructName}}Remove(c *gin.Context) {
    {{.Table.BusinessName}}.{{.Table.BusinessName}}Service.Delete{{.Table.StructName}}ByIds(c, baizeContext.ParamInt64Array(c, "{{.IdField}}s"))
    baizeContext.Success(c)
}
