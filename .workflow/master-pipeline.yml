version: '1.0'
name: master-pipeline
displayName: MasterPipeline
triggers:
  trigger: auto
  push:
    branches:
      include:
        - master
variables:
  GO111MODULE: 'on'
  GOPROXY: https://goproxy.cn,direct
stages:
  - name: compile
    displayName: 编译
    strategy: naturally
    trigger: auto
    steps:
      - step: build@golang
        name: build_golang
        displayName: Golang 构建
        golangVersion: '1.20'
        commands:
          - mkdir output
          - go mod tidy
          - cd app && GOOS=linux GOARCH=amd64 go build -o output/baize
        artifacts:
          - name: BUILD_ARTIFACT
            path:
              - ./app/output
        strategy: {}
      - step: publish@general_artifacts
        name: publish_general_artifacts
        displayName: 上传制品
        dependArtifact: BUILD_ARTIFACT
        artifactName: output
        strategy: {}
        dependsOn: build_golang
  - name: release
    displayName: 发布
    strategy: naturally
    trigger: auto
    steps:
      - step: publish@release_artifacts
        name: publish_release_artifacts
        displayName: 发布
        dependArtifact: output
        version: 1.0.0.0
        autoIncrement: true
        strategy: {}
  - name: stage-a1385d90
    displayName: 部署
    strategy: naturally
    trigger: auto
    executor: []
    steps:
      - step: deploy@agent
        name: deploy_agent
        displayName: 主机部署
        hostGroupID:
          ID: baizeService
          hostID:
            - 0576fd91-d8a3-4645-96bb-21e59eceb99b
        deployArtifact:
          - source: build
            name: output
            target: /usr/local/baize
            dependArtifact: BUILD_ARTIFACT
        script:
          - '# 功能：部署脚本会在部署主机组的每台机器上执行'
          - '# 使用场景：先将制品包解压缩到指定目录中，再执行启动脚本deploy.sh，脚本示例地址：https://gitee.com/gitee-go/spring-boot-maven-deploy-case/blob/master/deploy.sh'
          - '# mkdir -p /home/admin/app'
          - '# tar zxvf ~/gitee_go/deploy/output.tar.gz -C /home/admin/app'
          - '# sh /home/admin/app/deploy.sh restart'
          - '# 如果你是php之类的无需制品包的制品方式，可以使用 git clone 或者 git pull 将源代码更新到服务器，再执行其他命令'
          - '# git clone ***@***.git'
          - ''
          - cd /usr/local/baize
          - rm -r baize
          - tar -zxvf output.tar.gz
          - cd output
          - mv baize ..
          - cd ..
          - PID=$(ps -ef | grep app | grep -v grep | awk '{print $2}')
          - '# 检查是否存在该进程'
          - if [ -z "$PID" ]
          - then
          - '    echo "No baize processes to kill"'
          - else
          - '    # 杀死进程'
          - '    kill -9 $PID'
          - '    echo "Killed baize process with PID: $PID"'
          - fi
          - ''
          - nohup ./baize >nohup.out &
          - ''
          - rm -r output.tar.gz
          - rm -rf output/
        notify: []
        strategy:
          retry: '0'
